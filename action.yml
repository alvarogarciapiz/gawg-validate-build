name: 'GAWG Validate Build'
description: 'This action belongs to the GAWG workflow and is used to validate the configurations, Dockerfile, secrets, deployment, and runner.'
author: Álvaro García Pizarro
branding:
  icon: 'settings'
  color: 'gray-dark'

inputs:
  technology:
    type: string
    description: 'Technology to validate. For example, node, python, java, etc.'

  docker:
    type: boolean
    description: 'Flag to validate the Dockerfile.'
    default: false

  self-hosted-runner:
    type: boolean
    description: 'Flag to validate the self-hosted runner.'
    default: false

  deployment:
    type: string
    description: 'Deployment type. For example, kubernetes, helm, etc.'

outputs:
  JSON:
    description: "JSON string containing workflow config parameters from workflow_config.json."
    value: ${{ steps.generate-config.outputs.JSON }}
  VALIDATE_SUMMARY:
    description: "Summary of the validation process."
    value: ${{ steps.summary.outputs.summary }}

runs:
  using: "composite"
  steps:
    - name: GAWG Information
      shell: bash
      run: |
        echo ""
        echo "========================================= VALIDATION INFO =========================================="
        echo "This action works with the GAWG workflow and will validate configurations, Dockerfile, secrets, deployment, and runner."
        echo "If any errors are found, the action will fail. Make sure to fix them before continuing. :)"
        echo "📡 Technology to validate is ${{ inputs.technology }}."
        if [ "${{ inputs.docker }}" = "true" ]; then
          echo "🐳 Dockerfile validation is enabled."
        else
          echo "🐳 Dockerfile validation is disabled."
        fi
        if [ "${{ inputs.self-hosted-runner }}" = "true" ]; then
          echo "🏠 Self-hosted runner validation is enabled."
        else
          echo "🏠 Self-hosted runner validation is disabled."
        fi
        echo "🚀 Deployment type is ${{ inputs.deployment }}."
        echo ""

    - name: Technology validation
      id: technology
      shell: bash
      run: |
        echo ""
        echo "====================================== TECHNOLOGY VALIDATION ======================================="
        if [ "${{ inputs.technology }}" = "node" ]; then
          echo "🔧 Validating Node.js configurations..."
          if [ -f "package.json" ]; then
            echo "✅ package.json found. Validation PASSED."
          else
            echo "❌ No package.json was found. Please add a package.json to the root of your repository."
            echo "❌ No package.json was found. Please add a package.json to the root of your repository." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        elif [ "${{ inputs.technology }}" = "python" ]; then
          echo "🔧 Validating Python configurations..."
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt found. Validation PASSED."
          else
            echo "❌ No requirements.txt was found. Please add a requirements.txt to the root of your repository."
            echo "❌ No requirements.txt was found. Please add a requirements.txt to the root of your repository." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        elif [ "${{ inputs.technology }}" = "java" ]; then
          echo "🔧 Validating Java configurations..."
          if [ -f "pom.xml" ]; then
            echo "✅ pom.xml found. Validation PASSED."
          else
            echo "❌ No pom.xml was found. Please add a pom.xml to the root of your repository."
            echo "❌ No pom.xml was found. Please add a pom.xml to the root of your repository." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        else
          echo "❌ Technology not supported. Please choose node, python, or java."
          echo "❌ Technology not supported. Please choose node, python, or java." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        echo ""

    - name: Dockerfile validation
      id: dockerfile
      shell: bash
      run: |
        echo ""
        echo "======================================== DOCKER VALIDATION ========================================="
        if [ "${{ inputs.docker }}" = "true" ]; then
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile found. Validation PASSED."
          else
            echo "❌ No Dockerfile was found. Please add a Dockerfile to the root of your repository."
            echo "❌ No Dockerfile was found. Please add a Dockerfile to the root of your repository." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        else
          echo "✅ Dockerfile validation SKIPPED (Docker was not set up)."
        fi
        echo ""

    - name: Self-hosted runner validation
      id: runner
      shell: bash
      run: |
        echo ""
        echo "====================================== RUNNER VALIDATION ======================================="
        if [ "${{ inputs.self-hosted-runner }}" = "false" ]; then
          echo "⚠️ You are using GitHub Actions runners, not self-hosted runners."
          echo "⚠️ You have a limited quota depending on your plan. Check it here: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions"
        else
          echo "🔧 Validating self-hosted runner configurations..."

          if [ "${{ inputs.technology }}" = "node" ]; then
            echo "🔧 Validating Node.js configurations..."
            if command -v node > /dev/null; then
              echo "✅ Node.js is installed. Version: $(node -v)"
            else
              echo "❌ Node.js is not installed. Please install Node.js."
              echo "❌ Node.js is not installed. Please install Node.js." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          elif [ "${{ inputs.technology }}" = "python" ]; then
            echo "🔧 Validating Python configurations..."
            if command -v python > /dev/null; then
              echo "✅ Python is installed. Version: $(python --version)"
            else
              echo "❌ Python is not installed. Please install Python."
              echo "❌ Python is not installed. Please install Python." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          elif [ "${{ inputs.technology }}" = "java" ]; then
            echo "🔧 Validating Java configurations..."
            if command -v java > /dev/null; then
              echo "✅ Java is installed. Version: $(java -version 2>&1 | head -n 1)"
            else
              echo "❌ Java is not installed. Please install Java."
              echo "❌ Java is not installed. Please install Java." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "❌ Technology not supported. Please choose node, python, or java."
            echo "❌ Technology not supported. Please choose node, python, or java." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        fi
        echo ""

    # - name: Secrets validation
    #   id: deployment
    #   shell: bash
    #   run: |
    #     echo "🔧 Validating secrets..."
    #     if [ -z "${{ secrets.TEST_SECRET }}" ]; then
    #         echo "❌ TEST_SECRET is not set. Please add the TEST_SECRET secret to your repository."
    #         exit 1
    #       else
    #         echo "✅ TEST_SECRET is set."
    #       fi

    - name: Deployment validation
      id: deployment
      shell: bash
      run: |
        echo ""
        echo "====================================== DEPLOYMENT VALIDATION ======================================="
        echo ""

    - name: Check JQ installation
      if: ${{ inputs.self-hosted-runner == 'true' }}
      shell: bash
      run: |
        echo ""
        if ! command -v jq > /dev/null; then
          echo "❌ jq is not installed. Trying to install jq..."
          set -e
          wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x jq
          sudo mv jq /usr/local/bin
          echo "✅ jq installed. Version: $(jq --version)"
        else
          echo "✅ jq found. Version: $(jq --version)"
        fi

    - name: Generate JSON config string
      id: generate-config
      shell: bash
      run: |
        echo ""
        echo "====================================== WORKFLOW_CONFIG JSON PARSING ======================================="
        # Check if workflow_config.yml exists
        if [ ! -f workflow_config.yml ]; then
          echo "❌ Error: workflow_config.yml not found. Add the provided workflow_config.yml file to your repository and retry."
          echo "❌ Error: workflow_config.yml not found. Add the provided workflow_config.yml file to your repository and retry." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        echo "Reading and converting workflow_config.yml to JSON..."
        json=$(cat workflow_config.yml | awk -F'=' '{gsub(/"/, "", $2); printf "{\"%s\":\"%s\"}\n", $1, $2}' | jq -s 'add')
        echo $json > temp.json
        json=$(jq -r --compact-output '.' temp.json)
        echo "Your workflow configuration"
        cat temp.json
        echo "JSON=$json" >> $GITHUB_OUTPUT

    - name: Summary
      id: summary
      shell: bash
      run: |
        echo ""
        echo "====================================== WORKFLOW SUMMARY ======================================="
        echo "## Workflow information" >> $GITHUB_STEP_SUMMARY
        echo "🎉 All validations passed successfully! | Technology: ${{ inputs.technology }} | Docker enabled: ${{ inputs.docker }} | Self-hosted runners: ${{ inputs.self-hosted-runner }} | Deployment type: ${{ inputs.deployment }}"
        echo "🎉 All validations passed successfully! | Technology: ${{ inputs.technology }} | Docker enabled: ${{ inputs.docker }} | Self-hosted runners: ${{ inputs.self-hosted-runner }} | Deployment type: ${{ inputs.deployment }}" >> $GITHUB_STEP_SUMMARY
        echo "👤 Workflow (${{ github.workflow }}) triggered by: ${{ github.actor }} on ${{ github.repository }}"
        echo "👤 Workflow (${{ github.workflow }}) triggered by: ${{ github.actor }} on ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "🔀 Branch: ${{ github.ref }}"
        echo "🔀 Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "⚡ Trigger: ${{ github.event_name }}"
        echo "⚡ Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "🆔 Workflow run ID: ${{ github.run_id }}"
        echo "🆔 Workflow run ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "🕒 Execution time: $(date)"
        echo "🕒 Execution time: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "🔗 Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "🔗 Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "==============================================================================================="

    - name: Generate Workflow Summary Report Output
      id: generate-summary
      shell: bash
      run: |
        echo $GITHUB_STEP_SUMMARY
        # echo "VALIDATE_SUMMARY=$summary" >> $GITHUB_OUTPUT